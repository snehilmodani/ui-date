{"version":3,"file":"date.js","sources":["webpack:///webpack/bootstrap 1a8a1e9a4dfddfbe25a7","webpack:///./src/date.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 1a8a1e9a4dfddfbe25a7\n **/","'use strict';\n\n// import jQuery from 'jquery';\n// import angular from 'angular';\n// import _datePicker from 'jquery-ui/datepicker'; // sets up jQuery with the datepicker plugin\nvar jQuery = window.$;\nvar angular = window.angular;\n\nangular.module('ui.date', []).constant('uiDateConfig', {}).constant('uiDateFormatConfig', '').factory('uiDateConverter', ['uiDateFormatConfig', function (uiDateFormatConfig) {\n  return {\n    stringToDate: stringToDate,\n    dateToString: dateToString\n  };\n\n  //https://github.com/angular/angular.js/blob/622c42169699ec07fc6daaa19fe6d224e5d2f70e/src/Angular.js#L1207\n  function timezoneToOffset(timezone, fallback) {\n    timezone = timezone.replace(/:/g, '');\n    var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;\n    return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;\n  }\n\n  function addDateMinutes(date, minutes) {\n    date = new Date(date.getTime());\n    date.setMinutes(date.getMinutes() + minutes);\n    return date;\n  }\n\n  function convertTimezoneToLocal(date, timezone, reverse) {\n    reverse = reverse ? -1 : 1;\n    var dateTimezoneOffset = date.getTimezoneOffset();\n    var timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\n    return addDateMinutes(date, reverse * (timezoneOffset - dateTimezoneOffset));\n  }\n\n  function doTZ(date, timezone, reverse) {\n    return timezone ? convertTimezoneToLocal(date, timezone, reverse) : date;\n  }\n\n  function dateToString(uiDateFormat, value) {\n    var dateFormat = uiDateFormat || uiDateFormatConfig;\n    if (value) {\n      if (dateFormat) {\n        try {\n          return jQuery.datepicker.formatDate(dateFormat, value);\n        } catch (formatException) {\n          return undefined;\n        }\n      }\n\n      if (value.toISOString) {\n        return value.toISOString();\n      }\n    }\n    return null;\n  }\n\n  function stringToDate(dateFormat, valueToParse, timezone) {\n    dateFormat = dateFormat || uiDateFormatConfig;\n\n    if (angular.isDate(valueToParse) && !isNaN(valueToParse)) {\n      return doTZ(valueToParse, timezone);\n    }\n\n    if (angular.isString(valueToParse)) {\n      if (dateFormat) {\n        return doTZ(jQuery.datepicker.parseDate(dateFormat, valueToParse), timezone);\n      }\n\n      var isoDate = new Date(valueToParse);\n      return isNaN(isoDate.getTime()) ? null : doTZ(isoDate, timezone);\n    }\n\n    if (angular.isNumber(valueToParse)) {\n      // presumably timestamp to date object\n      return doTZ(new Date(valueToParse), timezone);\n    }\n\n    return null;\n  }\n}]).directive('uiDate', ['uiDateConfig', 'uiDateConverter', function uiDateDirective(uiDateConfig, uiDateConverter) {\n\n  return {\n    require: '?ngModel',\n    link: function link(scope, element, attrs, controller) {\n\n      var $element = jQuery(element);\n\n      var getOptions = function getOptions() {\n        return angular.extend({}, uiDateConfig, scope.$eval(attrs.uiDate));\n      };\n      var initDateWidget = function initDateWidget() {\n        var showing = false;\n        var opts = getOptions();\n        var timezone = controller ? controller.$options.getOption('timezone') : null;\n\n        function setVal(forcedUpdate) {\n          var keys = ['Hours', 'Minutes', 'Seconds', 'Milliseconds'];\n          var isDate = angular.isDate(controller.$modelValue);\n          var preserve = {};\n\n          if (!forcedUpdate && isDate && controller.$modelValue.toDateString() === $element.datepicker('getDate').toDateString()) {\n            return;\n          }\n\n          if (isDate) {\n            angular.forEach(keys, function (key) {\n              preserve[key] = controller.$modelValue['get' + key]();\n            });\n          }\n\n          var newViewValue = $element.datepicker('getDate');\n\n          if (isDate) {\n            angular.forEach(keys, function (key) {\n              newViewValue['set' + key](preserve[key]);\n            });\n          }\n\n          controller.$setViewValue(newViewValue);\n        }\n\n        // If we have a controller (i.e. ngModelController) then wire it up\n        if (controller) {\n          // Set the view value in a $apply block when users selects\n          // (calling directive user's function too if provided)\n          var _onSelect = opts.onSelect || angular.noop;\n          opts.onSelect = function (value, picker) {\n            scope.$apply(function () {\n              showing = true;\n              setVal();\n              $element.blur();\n              _onSelect(value, picker, $element);\n            });\n          };\n\n          var _beforeShow = opts.beforeShow || angular.noop;\n          opts.beforeShow = function (input, picker) {\n            showing = true;\n            _beforeShow(input, picker, $element);\n          };\n\n          var _onClose = opts.onClose || angular.noop;\n          opts.onClose = function (value, picker) {\n            showing = false;\n            _onClose(value, picker, $element);\n          };\n\n          element.on('focus', function (focusEvent) {\n            if (attrs.readonly) {\n              focusEvent.stopImmediatePropagation();\n            }\n          });\n\n          $element.off('blur.datepicker').on('blur.datepicker', function () {\n            if (!showing) {\n              scope.$apply(function () {\n                $element.datepicker('setDate', $element.datepicker('getDate'));\n                setVal();\n              });\n            }\n          });\n\n          controller.$validators.uiDateValidator = function uiDateValidator(modelValue, viewValue) {\n            return viewValue === null || viewValue === '' || angular.isDate(uiDateConverter.stringToDate(attrs.uiDateFormat, viewValue));\n          };\n\n          controller.$parsers.push(function uiDateParser(valueToParse) {\n            return uiDateConverter.stringToDate(attrs.uiDateFormat, valueToParse, timezone);\n          });\n\n          // Update the date picker when the model changes\n          controller.$render = function () {\n            // Force a render to override whatever is in the input text box\n            if (angular.isDate(controller.$modelValue) === false && angular.isString(controller.$modelValue)) {\n              controller.$modelValue = uiDateConverter.stringToDate(attrs.uiDateFormat, controller.$modelValue, timezone);\n            }\n            $element.datepicker('setDate', controller.$modelValue);\n          };\n        }\n        // Check if the $element already has a datepicker.\n        //\n\n        if ($element.data('datepicker')) {\n          // Updates the datepicker options\n          $element.datepicker('option', opts);\n          $element.datepicker('refresh');\n        } else {\n          // Creates the new datepicker widget\n          $element.datepicker(opts);\n\n          // Cleanup on destroy, prevent memory leaking\n          $element.on('$destroy', function () {\n            $element.datepicker('hide');\n            $element.datepicker('destroy');\n          });\n        }\n\n        if (controller) {\n          controller.$render();\n          // Update the model with the value from the datepicker after parsed\n          setVal(true);\n        }\n      };\n\n      // Watch for changes to the directives options\n      scope.$watch(getOptions, initDateWidget, true);\n    }\n  };\n}]).directive('uiDateFormat', ['uiDateConverter', function (uiDateConverter) {\n  return {\n    require: 'ngModel',\n    link: function link(scope, element, attrs, modelCtrl) {\n      var dateFormat = attrs.uiDateFormat;\n\n      // Use the datepicker with the attribute value as the dateFormat string to convert to and from a string\n      modelCtrl.$formatters.unshift(function (value) {\n        return uiDateConverter.stringToDate(dateFormat, value);\n      });\n\n      modelCtrl.$parsers.push(function (value) {\n        return uiDateConverter.dateToString(dateFormat, value);\n      });\n    }\n  };\n}]);\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/date.js\n ** module id = 0\n ** module chunks = 0\n **/"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACtsourceRoot":""}